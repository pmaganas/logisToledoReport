version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: sesame_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sesame_reports}
      POSTGRES_USER: ${POSTGRES_USER:-sesame_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - sesame_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sesame_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  web:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: sesame_app
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-sesame_user}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-sesame_reports}
      PGHOST: db
      PGPORT: 5432
      PGUSER: ${POSTGRES_USER:-sesame_user}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      PGDATABASE: ${POSTGRES_DB:-sesame_reports}
      
      # Authentication
      ADMIN_USERNAME: ${ADMIN_USERNAME}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      
      # Flask Configuration
      FLASK_SECRET_KEY: ${FLASK_SECRET_KEY}
      SESSION_SECRET: ${SESSION_SECRET}
      
      # Application Settings
      WEB_CONCURRENCY: ${WEB_CONCURRENCY:-4}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      MAX_REPORTS: ${MAX_REPORTS:-10}
      
    ports:
      - "${PORT:-5000}:5000"
    volumes:
      - ./temp_reports:/app/temp_reports
      - ./logs:/app/logs
      - ./static:/app/static:ro
      - ./templates:/app/templates:ro
    depends_on:
      db:
        condition: service_healthy
    networks:
      - sesame_network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 5 &&
        echo 'Initializing database...' &&
        python -c 'from app import app, db; app.app_context().push(); db.create_all(); print(\"Database initialized\")' &&
        echo 'Starting application...' &&
        gunicorn --bind 0.0.0.0:5000 --workers ${WEB_CONCURRENCY:-4} --timeout 120 --reload --access-logfile logs/access.log --error-logfile logs/error.log main:app
      "

  # Servicio opcional para desarrollo con hot-reload
  dev:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: sesame_dev
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-sesame_user}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-sesame_reports}
      PGHOST: db
      PGPORT: 5432
      PGUSER: ${POSTGRES_USER:-sesame_user}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      PGDATABASE: ${POSTGRES_DB:-sesame_reports}
      ADMIN_USERNAME: ${ADMIN_USERNAME}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      FLASK_SECRET_KEY: ${FLASK_SECRET_KEY}
      SESSION_SECRET: ${SESSION_SECRET}
      FLASK_DEBUG: "true"
      FLASK_ENV: development
    ports:
      - "${DEV_PORT:-5001}:5000"
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
    networks:
      - sesame_network
    profiles:
      - dev
    command: >
      sh -c "
        python -c 'from app import app, db; app.app_context().push(); db.create_all()' &&
        python -m flask run --host=0.0.0.0 --port=5000 --reload
      "

networks:
  sesame_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local